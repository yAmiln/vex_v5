{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT6)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\ndistance_16side = Distance(Ports.PORT16)\nmotor_group_20_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nmotor_group_20_motor_b = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\nmotor_group_20 = MotorGroup(motor_group_20_motor_a, motor_group_20_motor_b)\nmotor_10back = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nmotor_9grip = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\n# vex-vision-config:begin\nvision_2__BMG = Signature(1, -3331, -2367, -2849,10145, 12539, 11342,5.3, 0)\nvision_2__DUCKY = Signature(2, 2433, 2995, 2714,-4377, -3787, -4082,5.8, 0)\nvision_2__RMG = Signature(3, 10777, 13107, 11942,-1799, -775, -1287,4, 0)\nvision_2 = Vision(Ports.PORT2, 60, vision_2__BMG, vision_2__DUCKY, vision_2__RMG)\n# vex-vision-config:end\ndistance_17front = Distance(Ports.PORT17)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEX Python Program\n#\tAuthor:       Me\n#\tCreated:      11/23\n#\tDescription:  Python\n# \n# ------------------------------------------\n\n# COMMENTS & NOTES ================================================\n# base temperature: 40.00 %\n# temperature no more than 45.00 %\n# 11/24: p1 has worked flawlessly @ 40.00 %\n# 11/24: p2 has worked flawlessly @ 45.00 %\n\n# BUTTONS =========================================================\n# buttonX = skills\n# buttonRight = checkTemp\n# buttonLeft = angle_correction\n# buttonB = p2\n# buttonA = p1\n# buttonY = test (not in use)\n# all other buttons used for driving\n\n# Library imports\nfrom vex import *\n\n# when started?\nmotor_group_20.set_stopping(HOLD)\nmotor_10back.set_stopping(HOLD)\nmotor_9grip.set_stopping(BRAKE)\ndrivetrain.set_heading(0,DEGREES)\n\n# FUNCTIONS ===========================================================\n\ndef angle_correction(angle):\n    while drivetrain_inertial.heading(DEGREES) != angle:\n        drivetrain.turn(LEFT, drivetrain.heading(DEGREES) - angle, DEGREES)\n        if drivetrain_inertial.heading(DEGREES)==angle:\n            break\ncontroller_1.buttonLeft.pressed(angle_correction(0))\n\ndef checkTemp():\n    brain.screen.print(\"drivetrain: \")\n    brain.screen.print(drivetrain.temperature(PERCENT))\n    brain.screen.next_row()\n    brain.screen.print(\"arm: \")\n    brain.screen.print(motor_group_20.temperature(PERCENT))\n    brain.screen.next_row()\n    brain.screen.print(\"grip: \")\n    brain.screen.print(motor_9grip.temperature(PERCENT))\n    brain.screen.next_row()\n    brain.screen.print(\"back: \")\n    brain.screen.print(motor_10back.temperature(PERCENT))\n    brain.screen.next_row()\n    brain.screen.print(\"////////////\")\n    brain.screen.next_row()\ncontroller_1.buttonRight.pressed(checkTemp)\n\n# CONTROLLER FUNCTIONS =================================================\n\n### DRIVE FUNCTIONS ------------------------------------------------------\ndef rotate():\n    drivetrain.set_turn_velocity(controller_1.axis1.position() / 3,PERCENT)\n    drivetrain.turn(RIGHT)\ncontroller_1.axis1.changed(rotate)\n\n#def rotate2():\n    #left_drive_smart.set_velocity(controller_1.axis1.position(),PERCENT)\n    #right_drive_smart.set_velocity(controller_1.axis1.position(),PERCENT)\n    #left_drive_smart.spin(FORWARD)\n    #right_drive_smart.spin(FORWARD)\n\ndef move():\n    drivetrain.set_drive_velocity(controller_1.axis3.position(),PERCENT)\n    drivetrain.drive(FORWARD)\ncontroller_1.axis3.changed(move)\n\n### ARM FUNCTIONS ----------------------------------------------------\ndef armup():\n    motor_group_20.set_velocity(50,PERCENT)\n    motor_group_20.spin(FORWARD)    \ncontroller_1.buttonL1.pressed(armup)\n\ndef armstop():\n    motor_group_20.stop()\ncontroller_1.buttonL1.released(armstop)\ncontroller_1.buttonL2.released(armstop)\n\ndef armdown():\n    motor_group_20.set_velocity(50,PERCENT)\n    motor_group_20.spin(REVERSE)\ncontroller_1.buttonL2.pressed(armdown)\n\n### BACK FUNCTIONS --------------------------------------------------\ndef backup():\n    motor_10back.set_velocity(50,PERCENT)\n    motor_10back.spin(FORWARD)\ncontroller_1.buttonR1.pressed(backup)\n\ndef backstop():\n    motor_10back.stop()\ncontroller_1.buttonR1.released(backstop)\ncontroller_1.buttonR2.released(backstop)\n\ndef backdown():\n    motor_10back.set_velocity(50,PERCENT)\n    motor_10back.spin(REVERSE)\ncontroller_1.buttonR2.pressed(backdown)\n\n### GRIP FUNCTIONS ----------------------------------------------------\ndef gripup():\n    motor_9grip.set_velocity(100,PERCENT)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\ncontroller_1.buttonUp.pressed(gripup)\n\ndef gripdown():\n    motor_9grip.set_velocity(100,PERCENT)\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True)\ncontroller_1.buttonDown.pressed(gripdown)\n\n# SENSOR TESTING ===============================================================\n\ndef sense():\n    if (distance_16side.is_object_detected()):\n        brain.screen.print(distance_16side.object_distance(INCHES))\n        brain.screen.next_row()\n\ndef sense2():\n    vision_2.take_snapshot(vision_2__BMG)\n\n#controller_1.buttonDown.pressed(sense)\n\n# AUTO PROGRAMS ============================================================\n\n# one neutral goal + left side AWP\ndef p2():\n    motor_10back.spin_for(REVERSE,85,DEGREES,wait=True)\n    #wait(0.5,SECONDS)\n    #motor_10back.spin_for(FORWARD,65,DEGREES,wait=True)\n    wait(0.5,SECONDS)\n    motor_10back.spin_for(REVERSE,0.5,TURNS,wait=False)\n    drivetrain.set_turn_velocity(50,PERCENT)\n    drivetrain.turn_to_heading(7,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(70,PERCENT)\n    drivetrain.drive_for(FORWARD, 42, INCHES, wait=True)\n    drivetrain.set_drive_velocity(35,PERCENT)\n    drivetrain.drive_for(FORWARD, 5, INCHES, wait=True)\n    # grab\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True)\n    wait(0.5, SECONDS)\n    drivetrain.set_drive_velocity(50,PERCENT)\n    drivetrain.drive_for(REVERSE, 42, INCHES, wait=True)\n    wait(0.5, SECONDS)\n    # release\n    #drivetrain.set_drive_velocity(40,PERCENT)\n    #drivetrain.turn_to_heading(270, DEGREES)\n    #drivetrain.drive_for(FORWARD,6,INCHES,wait=True)\n    #motor_10back.spin_for(REVERSE,1,TURNS,wait=True)\n    #drivetrain.drive_for(REVERSE,6,INCHES,wait=True)\n    # motor_10back.set_stopping(HOLD)\n    #motor_10back.spin_for(FORWARD,1,TURNS,wait=True)\n\n# two neutral goals + left side AWP\ndef p2v2():\n    motor_10back.spin_for(REVERSE,85,DEGREES,wait=True)\n    #wait(0.5,SECONDS)\n    #motor_10back.spin_for(FORWARD,65,DEGREES,wait=True)\n    wait(0.5,SECONDS)\n    motor_10back.spin_for(REVERSE,0.5,TURNS,wait=False)\n    drivetrain.set_turn_velocity(50,PERCENT)\n    drivetrain.turn_to_heading(7,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(70,PERCENT)\n    drivetrain.drive_for(FORWARD, 42, INCHES, wait=True)\n    drivetrain.set_drive_velocity(35,PERCENT)\n    drivetrain.drive_for(FORWARD, 5, INCHES, wait=True)\n    # grab\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True)\n    wait(0.5, SECONDS)\n    motor_10back.spin_for(REVERSE,520,DEGREES,wait=False) #\n    drivetrain.turn_to_heading(290,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(40,PERCENT)\n    drivetrain.drive_for(REVERSE,16,INCHES,wait=True)\n    drivetrain.turn_to_heading(245,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,20,INCHES,wait=True)\n    wait(0.5,SECONDS)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    motor_10back.spin_for(FORWARD,1,TURNS,wait=True)\n    drivetrain.drive_for(FORWARD,52,INCHES,wait=True)\n    drivetrain.turn_to_heading(0,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,26,INCHES,wait=False)\n    motor_10back.set_velocity(30,PERCENT)\n    motor_10back.spin_for(REVERSE,1,TURNS,wait=True)\n\ncontroller_1.buttonB.pressed(p2v2)\n\n# one neutral goal + right side AWP\ndef p1():\n    # start on right side\n    # front aligned with inner tile line \n    motor_10back.set_velocity(100,PERCENT)\n    motor_10back.spin_for(REVERSE,2,TURNS,wait=False)\n    wait(1,SECONDS)\n    drivetrain.set_drive_velocity(70,PERCENT)\n    drivetrain.drive_for(REVERSE, 39, INCHES, wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT)\n    drivetrain.drive_for(REVERSE,5,INCHES,wait=True)\n    # grab\n    wait(0.5,SECONDS)\n    motor_10back.set_velocity(50,PERCENT)\n    motor_10back.spin_for(FORWARD,0.7,TURNS,wait=True)\n    wait(0.5, SECONDS)\n    drivetrain.set_drive_velocity(35,PERCENT)\n    drivetrain.drive_for(FORWARD,28,INCHES,wait=True)\n    drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,10,INCHES,wait=True)\n    # grab\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True)\n    wait(1,SECONDS)\n    drivetrain.drive_for(REVERSE,25,INCHES,wait=True)\n    # release\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\ncontroller_1.buttonA.pressed(p1)\n\n# start on right side\n# push neutral goal, elevate blue goal, push tall neutral goal, elevate last neutral goal, push red goal\n# 140 points + ring(s)\ndef skills1():\n    drivetrain.drive_for(FORWARD,11,INCHES,wait=True)\n    # grab (front) blue AWP goal\n    drivetrain.turn_to_heading(160,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,70,INCHES,wait=True)\n    # now in front of platform\n    motor_group_20.spin_for(FORWARD,1.5,TURNS,wait=False)\n    drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,7,INCHES,wait=False)\n    drivetrain.turn_to_heading(345,DEGREES,wait=True)\n    wait(0.5,SECONDS)\n    # in position to drop MG\n    motor_group_20.spin_for(REVERSE,0.5,TURNS,wait=False)\n    drivetrain.turn_to_heading(20,DEGREES,wait=True)\n    # release (front)\n    drivetrain.drive_for(REVERSE,2,INCHES,wait=True)\n    motor_group_20.spin_for(FORWARD,0.3,TURNS,wait=True)\n    drivetrain.turn_to_heading(0,DEGREES,wait=True)\n    # in position to push tall MG\n    drivetrain.drive_for(REVERSE,80,INCHES,wait=False)\n    motor_group_20.spin_for(REVERSE,1.3,TURNS,wait=True)\n    drivetrain.turn_to_heading(315,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,38,INCHES,wait=True)\n    # facing last neutral goal\n    # grab (front)\n    wait(0.5,SECONDS)\n    drivetrain.turn_to_heading(45,DEGREES,wait=True)\n    # facing platform\n    drivetrain.drive_for(FORWARD,40,INCHES,wait=False)\n    motor_group_20.spin_for(FORWARD,1.5,TURNS,wait=True)\n    # in position to drop MG\n    wait(0.5,SECONDS)\n    motor_group_20.spin_for(REVERSE,0.5,TURNS,wait=True)\n    # release (front)\n    drivetrain.drive_for(REVERSE,2,INCHES,wait=True)\n    motor_group_20.spin_for(FORWARD,0.3,TURNS,wait=True)\n    drivetrain.drive_for(REVERSE,10,INCHES,wait=True)\n    motor_group_20.spin_for(REVERSE,1.3,TURNS,wait=False)\n    drivetrain.turn_to_heading(90,DEGREES,wait=False)\n    motor_10back.spin_for(FORWARD,1.3,TURNS,wait=False)\n    # ready to lift red AWP goal on back\n    drivetrain.drive_for(REVERSE,50,INCHES,wait=True)\n    wait(0.5,SECONDS)\n    motor_10back.spin_for(REVERSE,0.5,TURNS,wait=True)\n    drivetrain.turn_to_heading(350,DEGREES,wait=False)\n    # drive back to red home zone\n    drivetrain.drive_for(REVERSE,48,INCHES,wait=True)\n\n# start on right side directly behind MG\n# push 4 right-most goals (M-shape), then grab last AWP MG and return\n# 80-100 points + ring(s)\ndef skills2():\n    drivetrain.set_drive_velocity(65,PERCENT)\n    drivetrain.set_turn_velocity(40,PERCENT)\n    drivetrain.drive_for(FORWARD,80,INCHES,wait=True) # pushed AWP MG\n    # lower grip to drop ring? maybe two rings?\n    drivetrain.turn_to_heading(30,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,60,INCHES,wait=True) # pushed neutral goal\n    drivetrain.turn_to_heading(320,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,70,INCHES,wait=True) # pushed tall neutral goal\n    drivetrain.turn_to_heading(280,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,28,INCHES,wait=True) # at AWP MG\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(60,PERCENT)\n    drivetrain.drive_for(REVERSE,48,INCHES,wait=True)\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,50,INCHES,wait=True)\n    drivetrain.set_turn_velocity(30,PERCENT)\n    drivetrain.set_drive_velocity(30,PERCENT)\n    drivetrain.turn_to_heading(177,DEGREES,wait=True)\n    motor_group_20.spin_for(FORWARD,2.2,TURNS,wait=True)\n    wait(0.5,SECONDS)\n    drivetrain.drive_for(FORWARD,14,INCHES,wait=True) # now in position in front of platform\n    wait(0.5,SECONDS)\n    motor_group_20.set_velocity(30,PERCENT)\n    motor_group_20.spin_for(REVERSE,1,TURNS,wait=True)\n    wait(1,SECONDS)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(20,PERCENT)\n    drivetrain.drive_for(REVERSE,2,INCHES,wait=True)\n    wait(1,SECONDS)\n    motor_group_20.spin_for(FORWARD,1.1,TURNS,wait=True)\n    wait(1,SECONDS)\n    drivetrain.drive_for(REVERSE,24,INCHES,wait=True)\n\ndef skills3():\n    drivetrain.set_drive_velocity(65,PERCENT)\n    drivetrain.set_turn_velocity(40,PERCENT)\n    drivetrain.drive_for(FORWARD,80,INCHES,wait=True) # pushed AWP MG\n    # lower grip to drop ring? maybe two rings?\n    drivetrain.turn_to_heading(30,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,60,INCHES,wait=True) # pushed neutral goal\n    drivetrain.turn_to_heading(320,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,70,INCHES,wait=True) # pushed tall neutral goal\n    drivetrain.turn_to_heading(25,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,80,INCHES,wait=True) # pushed last neutral goal\n\ndef skills4():\n    drivetrain.set_drive_velocity(65,PERCENT)\n    drivetrain.set_turn_velocity(40,PERCENT)\n    drivetrain.drive_for(FORWARD,80,INCHES,wait=True) # pushed AWP MG\n    # lower grip to drop ring? maybe two rings?\n    drivetrain.turn_to_heading(30,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,60,INCHES,wait=True) # pushed neutral goal\n    drivetrain.turn_to_heading(320,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,70,INCHES,wait=True) # pushed tall neutral goal\n    drivetrain.turn_to_heading(25,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,80,INCHES,wait=True) # pushed last neutral goal\n    drivetrain.turn_to_heading(20,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,85,INCHES,wait=True)\n    drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,30,INCHES,wait=True)\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,50,INCHES,wait=True)\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,50,INCHES,wait=True)\n    motor_group_20.spin_for(FORWARD,2.2,TURNS,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT)\n    drivetrain.drive_for(FORWARD,20,INCHES,wait=True)\n    motor_group_20.set_velocity(30,PERCENT)\n    motor_group_20.spin_for(REVERSE,1,TURNS,wait=True)\n    wait(0.5,SECONDS)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\n    wait(1,SECONDS)\n    drivetrain.set_drive_velocity(20,PERCENT)\n    drivetrain.drive_for(REVERSE,2,INCHES,wait=True)\n    motor_group_20.spin_for(FORWARD,1.1,TURNS,wait=True)\n    drivetrain.drive_for(REVERSE,14,INCHES,wait=True)\n\ndef skills5():\n    #drivetrain.set_drive_velocity(50,PERCENT)\n    motor_10back.set_velocity(70,PERCENT)\n    motor_10back.spin_for(REVERSE,2,TURNS,wait=True)\n    drivetrain.drive_for(REVERSE,14,INCHES,wait=True)\n    motor_10back.spin_for(FORWARD,0.5,TURNS,wait=True) # picked up AWP MG\n    drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,16,INCHES,wait=True)\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    if drivetrain.heading(DEGREES) != 180:\n        drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,40,INCHES,wait=True)\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True) #grabbed neutral MG\n    drivetrain.drive_for(FORWARD,28,INCHES,wait=True)\n    drivetrain.turn_to_heading(90,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,40,INCHES,wait=True)\n    motor_group_20.spin_for(FORWARD,2.2,TURNS,wait=True)\n    #drivetrain.set_turn_velocity(30,PERCENT)\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,10,INCHES,wait=True) #about to drop MG on platform\n    motor_group_20.spin_for(REVERSE,1,TURNS,wait=True)\n    wait(0.5,SECONDS)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,1,INCHES,wait=True)\n    # brain.screen.print(\":)\")\n    motor_group_20.set_velocity(20,PERCENT)\n    motor_group_20.spin_for(FORWARD,1.2,TURNS,wait=True)\n    # brain.screen.print(\":)\")\n    motor_10back.spin_for(REVERSE,0.6,TURNS,wait=True) #going to get dropped MG\n    drivetrain.drive_for(REVERSE,26,INCHES,wait=True)\n    drivetrain.drive_for(FORWARD,12,INCHES,wait=True)\n    drivetrain.turn_to_heading(0,DEGREES,wait=True)\n    motor_group_20.spin_for(REVERSE,2.5,TURNS,wait=True)\n    if motor_group_20.is_done():\n        motor_group_20.stop()\n    drivetrain.drive_for(FORWARD,18,INCHES,wait=True)\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True) #grabbed MG\n    motor_group_20.spin_for(FORWARD,2.4,TURNS,wait=True)\n    if motor_group_20.is_done():\n        motor_group_20.stop()\n    drivetrain.turn_to_heading(225,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,18,INCHES,wait=True)\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,29,INCHES,wait=True) #elevating on platform\n    motor_group_20.spin_for(REVERSE,1,TURNS,wait=True)\n    wait(0.5,SECONDS)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,1,INCHES,wait=True)\n    # brain.screen.print(\":)\")\n    motor_group_20.set_velocity(20,PERCENT)\n    motor_group_20.spin_for(FORWARD,1.2,TURNS,wait=True) #done elevating\n\ndef skills6():\n    drivetrain.set_drive_velocity(30,PERCENT) #\n    motor_10back.set_velocity(100,PERCENT) #\n    motor_10back.spin_for(REVERSE,2,TURNS,wait=False)\n    drivetrain.drive_for(REVERSE,14,INCHES,wait=True)\n    motor_10back.spin_for(FORWARD,1,TURNS,wait=True) # picked up AWP MG\n    drivetrain.set_turn_velocity(30,PERCENT) #\n    drivetrain.set_drive_velocity(50,PERCENT) #100 - 80 - 60 - 50\n    drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    if drivetrain.heading(DEGREES) != 270:\n        drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    dis = distance_17front.object_distance(INCHES)\n    drivetrain.drive_for(REVERSE,27 - dis,INCHES,wait=True)\n    #drivetrain.drive_for(REVERSE,22,INCHES,wait=True) #16 - 22\n    drivetrain.set_turn_velocity(50,PERCENT) \n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    wait(0.1,SECONDS)\n    if drivetrain.heading(DEGREES) != 180:\n        drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(80,PERCENT)\n    drivetrain.drive_for(FORWARD,30,INCHES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT) #\n    drivetrain.drive_for(FORWARD,10,INCHES,wait=True)\n    motor_9grip.set_velocity(100,PERCENT) #\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True) #grabbed neutral MG\n    motor_group_20.set_velocity(100,PERCENT)\n    motor_group_20.spin_for(FORWARD,0.2,TURNS,wait=True)\n    if motor_group_20.is_done():\n        motor_group_20.stop()\n    drivetrain.set_drive_velocity(100,PERCENT) #\n    drivetrain.drive_for(FORWARD,28,INCHES,wait=True)\n    drivetrain.turn_to_heading(90,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,40,INCHES,wait=True)\n    motor_group_20.set_velocity(100,PERCENT)\n    motor_group_20.spin_for(FORWARD,2.2,TURNS,wait=True)\n    drivetrain.set_turn_velocity(60,PERCENT)\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT)\n    #drivetrain.drive_for(FORWARD,10,INCHES,wait=True) #about to drop MG on platform\n    dis = distance_17front.object_distance(INCHES)\n    drivetrain.drive_for(FORWARD,dis - 4,INCHES,wait=True)\n    motor_group_20.set_velocity(40,PERCENT)\n    motor_group_20.spin_for(REVERSE,1.1,TURNS,wait=True)\n    wait(0.5,SECONDS)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,1,INCHES,wait=True)\n    # brain.screen.print(\":)\")\n    motor_group_20.set_velocity(20,PERCENT)\n    motor_group_20.spin_for(FORWARD,0.6,TURNS,wait=True)\n    #motor_group_20.spin_for(FORWARD,1.2,TURNS,wait=True)\n    motor_group_20.set_velocity(100,PERCENT)\n    motor_group_20.spin_for(FORWARD,0.6,TURNS,wait=True)\n    # brain.screen.print(\":)\")\n    drivetrain.set_drive_velocity(40,PERCENT)\n    motor_10back.spin_for(REVERSE,1,TURNS,wait=True) #going to get dropped MG\n    drivetrain.drive_for(REVERSE,26,INCHES,wait=True)\n    drivetrain.set_drive_velocity(100,PERCENT) #\n    drivetrain.drive_for(FORWARD,12,INCHES,wait=True)\n    drivetrain.set_turn_velocity(50,PERCENT) #?\n    drivetrain.turn_to_heading(0,DEGREES,wait=True)\n    motor_group_20.set_velocity(100,PERCENT) #\n    if drivetrain.heading(DEGREES) != 0:\n        drivetrain.turn_to_heading(0,DEGREES,wait=False)\n    motor_group_20.spin_for(REVERSE,2.4,TURNS,wait=True)\n    if motor_group_20.is_done():\n        motor_group_20.stop()\n    #drivetrain.drive_for(FORWARD,18,INCHES,wait=True)\n    drivetrain.drive_for(FORWARD,8,INCHES,wait=True)\n    drivetrain.set_drive_velocity(40,PERCENT) #\n    drivetrain.drive_for(FORWARD,10,INCHES,wait=True)\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True) #grabbed MG\n    drivetrain.turn_to_heading(225,DEGREES,wait=False)\n    motor_group_20.spin_for(FORWARD,1.7,TURNS,wait=True)\n    if motor_group_20.is_done():\n        motor_group_20.stop()\n    #motor_group_20.spin_for(REVERSE,0.2,TURNS,wait=True)\n    drivetrain.set_drive_velocity(70,PERCENT) #\n    drivetrain.drive_for(FORWARD,20,INCHES,wait=True)\n    if drivetrain.is_done():\n        drivetrain.stop()\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,29,INCHES,wait=True) #elevating on platform\n    if drivetrain.is_done():\n        drivetrain.stop()\n    motor_group_20.set_velocity(40,PERCENT) #\n    motor_group_20.spin_for(REVERSE,1,TURNS,wait=True)\n    wait(0.5,SECONDS)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT) #\n    drivetrain.drive_for(REVERSE,1,INCHES,wait=True)\n    if drivetrain.is_done():\n        drivetrain.stop()\n    drivetrain.set_turn_velocity(30,PERCENT) #\n    drivetrain.turn_to_heading(190,DEGREES,wait=True)\n    # brain.screen.print(\":)\")\n    motor_group_20.set_velocity(20,PERCENT) #\n    motor_group_20.spin_for(FORWARD,1.1,TURNS,wait=True) #done elevating\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(50,PERCENT) #\n    drivetrain.drive_for(REVERSE,2,INCHES,wait=True)\n    drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(70,PERCENT) #\n    drivetrain.drive_for(REVERSE,45,INCHES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT) #\n    drivetrain.drive_for(REVERSE,8,INCHES,wait=True)\n    motor_10back.spin_for(FORWARD,1,TURNS,wait=True) # picked up AWP MG\n    #drivetrain.set_drive_velocity(70,PERCENT) #\n    #drivetrain.drive_for(FORWARD,18,INCHES,wait=True)\n    #drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    #if drivetrain.heading(DEGREES) != 0:\n    #    drivetrain.turn_to_heading(0,DEGREES,wait=True)\n    #drivetrain.drive_for(FORWARD,30,INCHES,wait=True)\n    #drivetrain.set_drive_velocity(30,PERCENT) #\n    #drivetrain.drive_for(FORWARD,10,INCHES,wait=True)\n    #motor_9grip.set_velocity(100,PERCENT) #\n    #motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True) #grabbed neutral MG\n\ndef skills7():\n    drivetrain.set_drive_velocity(40,PERCENT) #\n    motor_10back.set_velocity(100,PERCENT) #\n    motor_10back.spin_for(REVERSE,2,TURNS,wait=False)\n    drivetrain.drive_for(REVERSE,14,INCHES,wait=True)\n    motor_10back.spin_for(FORWARD,1,TURNS,wait=True) # picked up AWP MG\n    drivetrain.set_turn_velocity(30,PERCENT) #\n    drivetrain.set_drive_velocity(80,PERCENT) #\n    drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    if drivetrain.heading(DEGREES) != 270:\n        drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,16,INCHES,wait=True)\n    drivetrain.set_turn_velocity(60,PERCENT)\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    if drivetrain.heading(DEGREES) != 180:\n        drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,30,INCHES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT) #\n    drivetrain.drive_for(FORWARD,10,INCHES,wait=True)\n    motor_9grip.set_velocity(100,PERCENT) #\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True) #grabbed neutral MG\n    drivetrain.set_drive_velocity(100,PERCENT) #\n    drivetrain.drive_for(FORWARD,28,INCHES,wait=True)\n    drivetrain.turn_to_heading(90,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,40,INCHES,wait=True)\n    motor_group_20.set_velocity(100,PERCENT)\n    motor_group_20.spin_for(FORWARD,2.2,TURNS,wait=True)\n    drivetrain.set_turn_velocity(30,PERCENT)\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT)\n    drivetrain.drive_for(FORWARD,10,INCHES,wait=True) #about to drop MG on platform\n    motor_group_20.set_velocity(40,PERCENT)\n    motor_group_20.spin_for(REVERSE,1,TURNS,wait=True)\n    wait(0.5,SECONDS)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\n    drivetrain.drive_for(REVERSE,1,INCHES,wait=True)\n    # brain.screen.print(\":)\")\n    motor_group_20.set_velocity(20,PERCENT)\n    motor_group_20.spin_for(FORWARD,1.2,TURNS,wait=True)\n    # brain.screen.print(\":)\")\n    motor_10back.spin_for(REVERSE,1,TURNS,wait=True) #going to get dropped MG\n    drivetrain.set_drive_velocity(40,PERCENT) #\n    drivetrain.drive_for(REVERSE,26,INCHES,wait=True)\n    drivetrain.set_drive_velocity(100,PERCENT) #\n    drivetrain.drive_for(FORWARD,12,INCHES,wait=True)\n    drivetrain.set_turn_velocity(30,PERCENT) #?\n    drivetrain.turn_to_heading(0,DEGREES,wait=True)\n    if drivetrain.heading(DEGREES) != 0:\n        drivetrain.turn_to_heading(0,DEGREES,wait=True)\n    motor_group_20.set_velocity(100,PERCENT) #\n    motor_group_20.spin_for(REVERSE,2.5,TURNS,wait=True)\n    if motor_group_20.is_done():\n        motor_group_20.stop()\n    #drivetrain.drive_for(FORWARD,18,INCHES,wait=True)\n    drivetrain.drive_for(FORWARD,8,INCHES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT) #\n    drivetrain.drive_for(FORWARD,10,INCHES,wait=True)\n    motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True) #grabbed MG\n    motor_group_20.spin_for(FORWARD,2.4,TURNS,wait=True)\n    if motor_group_20.is_done():\n        motor_group_20.stop()\n    drivetrain.turn_to_heading(225,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(70,PERCENT) #\n    drivetrain.drive_for(FORWARD,20,INCHES,wait=True)\n    if drivetrain.is_done():\n        drivetrain.stop()\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,29,INCHES,wait=True) #elevating on platform\n    if drivetrain.is_done():\n        drivetrain.stop()\n    motor_group_20.set_velocity(40,PERCENT) #\n    motor_group_20.spin_for(REVERSE,1,TURNS,wait=True)\n    wait(0.5,SECONDS)\n    motor_9grip.spin_for(FORWARD,300,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT) #\n    drivetrain.drive_for(REVERSE,1,INCHES,wait=True)\n    if drivetrain.is_done():\n        drivetrain.stop()\n    drivetrain.set_turn_velocity(30,PERCENT) #\n    drivetrain.turn_to_heading(190,DEGREES,wait=True)\n    # brain.screen.print(\":)\")\n    motor_group_20.set_velocity(20,PERCENT) #\n    motor_group_20.spin_for(FORWARD,1.2,TURNS,wait=True) #done elevating\n    drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(50,PERCENT) #\n    drivetrain.drive_for(REVERSE,2,INCHES,wait=True)\n    drivetrain.turn_to_heading(270,DEGREES,wait=True)\n    drivetrain.set_drive_velocity(70,PERCENT) #\n    drivetrain.drive_for(REVERSE,45,INCHES,wait=True)\n    drivetrain.set_drive_velocity(30,PERCENT) #\n    drivetrain.drive_for(REVERSE,8,INCHES,wait=True)\n    motor_10back.spin_for(FORWARD,1,TURNS,wait=True) # picked up AWP MG\n    #drivetrain.set_drive_velocity(70,PERCENT) #\n    #drivetrain.drive_for(FORWARD,18,INCHES,wait=True)\n    #drivetrain.turn_to_heading(180,DEGREES,wait=True)\n    #if drivetrain.heading(DEGREES) != 0:\n    #    drivetrain.turn_to_heading(0,DEGREES,wait=True)\n    #drivetrain.drive_for(FORWARD,30,INCHES,wait=True)\n    #drivetrain.set_drive_velocity(30,PERCENT) #\n    #drivetrain.drive_for(FORWARD,10,INCHES,wait=True)\n    #motor_9grip.set_velocity(100,PERCENT) #\n    #motor_9grip.spin_for(REVERSE,300,DEGREES,wait=True) #grabbed neutral MG\n\ncontroller_1.buttonX.pressed(skills6)\n\ndef test():\n    if distance_16side.is_object_detected():\n        brain.screen.print(\"Dis16: \")\n        brain.screen.print(distance_16side.object_distance(INCHES))\n        brain.screen.next_row()\n    if distance_17front.is_object_detected():\n        brain.screen.print(\"Dis17: \")\n        brain.screen.print(distance_17front.object_distance(INCHES))\n        brain.screen.next_row()\n    #front: 5.7 inches when blocked by platform leg\n    #front: 3.5 inches when farthest \n\ndef test2():\n    drivetrain.set_turn_velocity(30,PERCENT)\n    drivetrain.turn_to_heading(180,DEGREES,wait=False)\n    motor_group_20.set_velocity(100,PERCENT)\n    motor_group_20.spin_for(FORWARD,2.2,TURNS,wait=True)\ncontroller_1.buttonY.pressed(test)\n","textLanguage":"python","rconfig":[{"port":[1,3,11,12,6],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[16],"name":"distance_16side","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20,7],"name":"motor_group_20","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[10],"name":"motor_10back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"motor_9grip","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"vision_2","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":60,\"signatures\":[{\"name\":\"BMG\",\"parameters\":{\"uMin\":-3331,\"uMax\":-2367,\"uMean\":-2849,\"vMin\":10145,\"vMax\":12539,\"vMean\":11342,\"rgb\":1,\"type\":0,\"name\":\"BMG\"},\"range\":5.3},{\"name\":\"DUCKY\",\"parameters\":{\"uMin\":2433,\"uMax\":2995,\"uMean\":2714,\"vMin\":-4377,\"vMax\":-3787,\"vMean\":-4082,\"rgb\":1,\"type\":0,\"name\":\"DUCKY\"},\"range\":5.8},{\"name\":\"RMG\",\"parameters\":{\"uMin\":10777,\"uMax\":13107,\"uMean\":11942,\"vMin\":-1799,\"vMax\":-775,\"vMean\":-1287,\"rgb\":1,\"type\":0,\"name\":\"RMG\"},\"range\":4},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[17],"name":"distance_17front","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}